{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Conflux \u00b6 The Conflux Testnet v0.1.0 is released! We are excited to annouce the Conflux testnet release v0.1.0 to provide developers and users the early access to our technology. You can get the binary and source from here , or simply clone the source code from github by: $git clone https://github.com/Conflux-Chain/conflux-rust.git $cd conflux-rust $git checkout tags/v0.1.0 Conflux is a next generation pow-based public blockchain system which can achieve throughput with thousands of transactions per second and transaction confirmation latency in minutes. The key that enables its such high performance is its novel consensus mechanism based on the Tree-Graph (TG) blockchain structure. In this testnet release, the main features include: The Tree-Graph based consensus mechanism The account state store with Merkle-Tree based authentication The Javascript and JsonRpc API for fullnode interaction Solidity compatible smart contract ConfluxScan - the block chain explorer A web-based Conflux wallet","title":"Welcome to Conflux"},{"location":"#welcome-to-conflux","text":"The Conflux Testnet v0.1.0 is released! We are excited to annouce the Conflux testnet release v0.1.0 to provide developers and users the early access to our technology. You can get the binary and source from here , or simply clone the source code from github by: $git clone https://github.com/Conflux-Chain/conflux-rust.git $cd conflux-rust $git checkout tags/v0.1.0 Conflux is a next generation pow-based public blockchain system which can achieve throughput with thousands of transactions per second and transaction confirmation latency in minutes. The key that enables its such high performance is its novel consensus mechanism based on the Tree-Graph (TG) blockchain structure. In this testnet release, the main features include: The Tree-Graph based consensus mechanism The account state store with Merkle-Tree based authentication The Javascript and JsonRpc API for fullnode interaction Solidity compatible smart contract ConfluxScan - the block chain explorer A web-based Conflux wallet","title":"Welcome to Conflux"},{"location":"cli/","text":"In this document, we go through the process of using command-line interface toolkit to create and manage your key-pair, create and sign your transaction, and submit your transaction to Conflux. Get Key Management Toolkit \u00b6 You can download the key management toolkit of Conflux ( keymgr ) from here . Or you can directly build keymgr from Conflux source code with the following steps. $ git clone ssh://git@base.conflux-chain.org:2222/source/conflux-rust.git $ cd conflux-rust/key_manager/cli $ cargo build The binary of keymgr is then under the folder conflux-rust/key_manager/cli/target/ . Create Key Pair Using KeyMgr \u00b6 You can use keymgr to create your own secret/public key-pair. $ keymgr generate random A sample output is: secret: 074842cdfa28a02fd23f244126618bcb49588a5530e7135dcd8c86aa3fbf0103 public: 7827b388197a9b4c4c97aafff400b1d168439b0b6b2428dad9a8f8ec461789155a9318c7d0d38a2e696e41c99faa0e7f7ab55bc21814b6e7809936f1d51ee5b0 address: 71e177b579a4b1ad24382f4b559f479ca0099572 address is the 160-bit account Id derived from the public key. You can keep privately your secret key at anywhere that only you know. Generate, Sign, and Submit Token Transferring Transaction \u00b6 Conflux provides Javascript library CfxWeb to help user generate transactions in programmable way. The following is a sample code snippet. #!/usr/bin/env node var Tx = require('ethereumjs-tx'); var secretKey = Buffer.from('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex') var rawTx = { nonce: '0x00', gasPrice: '0x09184e72a000', gasLimit: '0x2710', to: '0x0000000000000000000000000000000000000000', value: '0x00', data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057' } var tx = new Tx(rawTx); tx.sign(secretKey); console.log('0x' + serializedTx.toString('hex')); var Web3 = require('web3'); var web3 = new Web3(); web3.setProvider(new web3.providers.HttpProvider('http://localhost:12345')); let answer = web3.cfx.sendRawTransaction('0x' + serializedTx.toString('hex')); console.log(answer); To run the above code, you need to first install Node.js and CfxWeb.js.","title":"Cli"},{"location":"cli/#get-key-management-toolkit","text":"You can download the key management toolkit of Conflux ( keymgr ) from here . Or you can directly build keymgr from Conflux source code with the following steps. $ git clone ssh://git@base.conflux-chain.org:2222/source/conflux-rust.git $ cd conflux-rust/key_manager/cli $ cargo build The binary of keymgr is then under the folder conflux-rust/key_manager/cli/target/ .","title":"Get Key Management Toolkit"},{"location":"cli/#create-key-pair-using-keymgr","text":"You can use keymgr to create your own secret/public key-pair. $ keymgr generate random A sample output is: secret: 074842cdfa28a02fd23f244126618bcb49588a5530e7135dcd8c86aa3fbf0103 public: 7827b388197a9b4c4c97aafff400b1d168439b0b6b2428dad9a8f8ec461789155a9318c7d0d38a2e696e41c99faa0e7f7ab55bc21814b6e7809936f1d51ee5b0 address: 71e177b579a4b1ad24382f4b559f479ca0099572 address is the 160-bit account Id derived from the public key. You can keep privately your secret key at anywhere that only you know.","title":"Create Key Pair Using KeyMgr"},{"location":"cli/#generate-sign-and-submit-token-transferring-transaction","text":"Conflux provides Javascript library CfxWeb to help user generate transactions in programmable way. The following is a sample code snippet. #!/usr/bin/env node var Tx = require('ethereumjs-tx'); var secretKey = Buffer.from('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex') var rawTx = { nonce: '0x00', gasPrice: '0x09184e72a000', gasLimit: '0x2710', to: '0x0000000000000000000000000000000000000000', value: '0x00', data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057' } var tx = new Tx(rawTx); tx.sign(secretKey); console.log('0x' + serializedTx.toString('hex')); var Web3 = require('web3'); var web3 = new Web3(); web3.setProvider(new web3.providers.HttpProvider('http://localhost:12345')); let answer = web3.cfx.sendRawTransaction('0x' + serializedTx.toString('hex')); console.log(answer); To run the above code, you need to first install Node.js and CfxWeb.js.","title":"Generate, Sign, and Submit Token Transferring Transaction"},{"location":"get_started/","text":"Getting Started \u00b6 Here we walk through how to quickly setup conflux full node to join the testnet and how to use Conflux wallet to manage your account, transfer Conflux token, and deploy smart contract. Running Conflux Full Node \u00b6 First, please build the binary as instructed in Installation . To start Conflux manually, you need to edit the default configuration file run/default.toml : Set public_address according to your public IP. The port should be 32323 by default. Set mining_author to the account address to receive mining reward. Conflux team has maintained some full nodes for the test net, and they have been provided as bootnodes . If you want to use other nodes to bootstrap your new node, you should edit this entry. Then you can run the following commands: $ cd run $ ../target/release/conflux --config default.toml It will start a full node and begin syncing the Conflux testnet blockchain. Note that two new directories ( blockchain_db and net_config ) will be created in the current working directory ( run ) to keep the persistent data. Please do not remove them unless data are corrupt or you want to start a fresh new node. To restart a node, just run the same command line in the same directory. Configuring Conflux Full Node \u00b6 Conflux can be configured using either the CLI options or a config file. Should the CLI flags and the config file disagree about a setting, the CLI takes precedence. The config file follows the format of TOML . The path of the configuration file can be set with the CLI option --config path/to/conflux.toml . A default configuration file default.toml with every configuration explained has been provided in the directory run , and you can start customizing your configuration from there. You can list all CLI options by running $ ./conflux --help . The vast majority of CLI options map to a setting in the TOML file, for example --public-address 127.0.0.1:32323 can be set by creating a config file: public_address=\"127.0.0.1:32323\" If you are going to set up a node and let it join the Conflux mainnet(testnet), you need to set the public_address appropriately. It should be set as the IP address of your node which can be accessed publicly from Internet. If your node is covered under a public gateway, you can get its public address by searching \"ip\" in Baidu . If you want to let your node participate the mining process, you need to enable it by setting start_mining as \"true\" and mining_author as the account address that receives the mining reward. Running Test \u00b6 We have both unit tests written in Rust and integration tests written in python. After you make some modifications to the code, you can run these tests to see if the system still runs correctly. First, you need to install the dependencies as instructed in Install Test Dependencies . Then you can run the tests as follows Linux: $ ./dev-support/test.sh This will automatically run the unit tests in our Rust code and the python tests. Others: To run unit tests in Rust: $ cargo test --release --all To run python integration tests: $ ./test/test_all.py Using Conflux Web Wallet \u00b6 You can access Conflux web wallet and create a new wallet by clicking \"New Wallet\" button that provides you a seed phrase (used to restore your wallet if you close it) and a password (used to unlock your wallet if you lock it when you leave your computer). Once a wallet is created, you can then manage your account addresses, send transactions, and deploy smart contract. In order to issue on-chain operations, you will need Conflux tokens. You can periodically (1 Conflux token per hour) get Conflux tokens from a faucet account. A pop-up box will appear to inform you to get the tokens. For developers to build smart contract, you can use remix to write and compile your contract to generate bytecode which you can then copy-paste to \"Contract\" page of the wallet that is triggered by action \"Contract\".","title":"Getting Started"},{"location":"get_started/#getting-started","text":"Here we walk through how to quickly setup conflux full node to join the testnet and how to use Conflux wallet to manage your account, transfer Conflux token, and deploy smart contract.","title":"Getting Started"},{"location":"get_started/#running-conflux-full-node","text":"First, please build the binary as instructed in Installation . To start Conflux manually, you need to edit the default configuration file run/default.toml : Set public_address according to your public IP. The port should be 32323 by default. Set mining_author to the account address to receive mining reward. Conflux team has maintained some full nodes for the test net, and they have been provided as bootnodes . If you want to use other nodes to bootstrap your new node, you should edit this entry. Then you can run the following commands: $ cd run $ ../target/release/conflux --config default.toml It will start a full node and begin syncing the Conflux testnet blockchain. Note that two new directories ( blockchain_db and net_config ) will be created in the current working directory ( run ) to keep the persistent data. Please do not remove them unless data are corrupt or you want to start a fresh new node. To restart a node, just run the same command line in the same directory.","title":"Running Conflux Full Node"},{"location":"get_started/#configuring-conflux-full-node","text":"Conflux can be configured using either the CLI options or a config file. Should the CLI flags and the config file disagree about a setting, the CLI takes precedence. The config file follows the format of TOML . The path of the configuration file can be set with the CLI option --config path/to/conflux.toml . A default configuration file default.toml with every configuration explained has been provided in the directory run , and you can start customizing your configuration from there. You can list all CLI options by running $ ./conflux --help . The vast majority of CLI options map to a setting in the TOML file, for example --public-address 127.0.0.1:32323 can be set by creating a config file: public_address=\"127.0.0.1:32323\" If you are going to set up a node and let it join the Conflux mainnet(testnet), you need to set the public_address appropriately. It should be set as the IP address of your node which can be accessed publicly from Internet. If your node is covered under a public gateway, you can get its public address by searching \"ip\" in Baidu . If you want to let your node participate the mining process, you need to enable it by setting start_mining as \"true\" and mining_author as the account address that receives the mining reward.","title":"Configuring Conflux Full Node"},{"location":"get_started/#running-test","text":"We have both unit tests written in Rust and integration tests written in python. After you make some modifications to the code, you can run these tests to see if the system still runs correctly. First, you need to install the dependencies as instructed in Install Test Dependencies . Then you can run the tests as follows Linux: $ ./dev-support/test.sh This will automatically run the unit tests in our Rust code and the python tests. Others: To run unit tests in Rust: $ cargo test --release --all To run python integration tests: $ ./test/test_all.py","title":"Running Test"},{"location":"get_started/#using-conflux-web-wallet","text":"You can access Conflux web wallet and create a new wallet by clicking \"New Wallet\" button that provides you a seed phrase (used to restore your wallet if you close it) and a password (used to unlock your wallet if you lock it when you leave your computer). Once a wallet is created, you can then manage your account addresses, send transactions, and deploy smart contract. In order to issue on-chain operations, you will need Conflux tokens. You can periodically (1 Conflux token per hour) get Conflux tokens from a faucet account. A pop-up box will appear to inform you to get the tokens. For developers to build smart contract, you can use remix to write and compile your contract to generate bytecode which you can then copy-paste to \"Contract\" page of the wallet that is triggered by action \"Contract\".","title":"Using Conflux Web Wallet"},{"location":"install/","text":"Installation \u00b6 Here is a step by step guide on how to build Conflux from the source code and get a node running. Install Build Dependencies \u00b6 Conflux requires latest stable Rust version and clang to build. We recommend installing Rust through rustup . If you don't already have rustup or clang , you can install them like this: Linux: $ curl https://sh.rustup.rs -sSf | sh clang can be installed with: Ubuntu: $ sudo apt-get install clang CentOS / RHEL: $ sudo yum install clang OSX: $ curl https://sh.rustup.rs -sSf | sh You might need to install brew if you need to use it to install clang : $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" clang comes with Xcode command line tools, and can also be installed with homebrew: $ brew install --with-clang llvm Windows: Make sure you have Visual Studio 2015 with C++ support installed. Next, download and run the rustup installer from https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe, start \"VS2015 x64 Native Tools Command Prompt\", and use the following command to install and set up the msvc toolchain: $ rustup default stable-x86_64-pc-windows-msvc clang can be installed with LLVM. Pre-built binaries can be downloaded from Download LLVM . Make sure to add LLVM to the system PATH as instructed. Make sure that these binaries are in your PATH (the instruction will be shown after installing rustup ). After that, you should be able to build Conflux from source. Build from Source Code \u00b6 After installing the dependencies mentioned above, now you can clone our repository and start building the executable binary: # download Conflux code $ git clone https://github.com/Conflux-Chain/conflux-rust $ cd conflux-rust # build in release mode $ cargo build --release This produces an executable in the ./target/release subdirectory. Note, when compiling a crate and you receive errors, it's in most cases your outdated version of Rust, or some of your crates have to be recompiled. Cleaning the repository will most likely solve the issue if you are on the latest stable version of Rust, try: $ cargo clean && cargo update To start running a Conflux full node, you can follow the instructions at Running Conflux Full Node . Install Test Dependencies \u00b6 We have a test framework written in Python3 (version>=3.6). Required packages can be installed by running $ ./dev-support/dep_pip3.sh Solidity compiler solc is also required, and be installed as follows: Ubuntu sudo add-apt-repository ppa:ethereum/ethereum sudo apt-get update sudo apt-get install solc OSX brew update brew upgrade brew tap ethereum/ethereum brew install solidity Others You can follow the detailed instructions at Installing the Solidity Compiler . Note that latest solidity compiler may be incompatible with Conflux and may cause the integration test to fail. If you encounter such problem, please install solidity compiler version 0.5.2. To run tests, you can build the source code first and follow the instructions at Running Test .","title":"Installation"},{"location":"install/#installation","text":"Here is a step by step guide on how to build Conflux from the source code and get a node running.","title":"Installation"},{"location":"install/#install-build-dependencies","text":"Conflux requires latest stable Rust version and clang to build. We recommend installing Rust through rustup . If you don't already have rustup or clang , you can install them like this: Linux: $ curl https://sh.rustup.rs -sSf | sh clang can be installed with: Ubuntu: $ sudo apt-get install clang CentOS / RHEL: $ sudo yum install clang OSX: $ curl https://sh.rustup.rs -sSf | sh You might need to install brew if you need to use it to install clang : $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" clang comes with Xcode command line tools, and can also be installed with homebrew: $ brew install --with-clang llvm Windows: Make sure you have Visual Studio 2015 with C++ support installed. Next, download and run the rustup installer from https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe, start \"VS2015 x64 Native Tools Command Prompt\", and use the following command to install and set up the msvc toolchain: $ rustup default stable-x86_64-pc-windows-msvc clang can be installed with LLVM. Pre-built binaries can be downloaded from Download LLVM . Make sure to add LLVM to the system PATH as instructed. Make sure that these binaries are in your PATH (the instruction will be shown after installing rustup ). After that, you should be able to build Conflux from source.","title":"Install Build Dependencies"},{"location":"install/#build-from-source-code","text":"After installing the dependencies mentioned above, now you can clone our repository and start building the executable binary: # download Conflux code $ git clone https://github.com/Conflux-Chain/conflux-rust $ cd conflux-rust # build in release mode $ cargo build --release This produces an executable in the ./target/release subdirectory. Note, when compiling a crate and you receive errors, it's in most cases your outdated version of Rust, or some of your crates have to be recompiled. Cleaning the repository will most likely solve the issue if you are on the latest stable version of Rust, try: $ cargo clean && cargo update To start running a Conflux full node, you can follow the instructions at Running Conflux Full Node .","title":"Build from Source Code"},{"location":"install/#install-test-dependencies","text":"We have a test framework written in Python3 (version>=3.6). Required packages can be installed by running $ ./dev-support/dep_pip3.sh Solidity compiler solc is also required, and be installed as follows: Ubuntu sudo add-apt-repository ppa:ethereum/ethereum sudo apt-get update sudo apt-get install solc OSX brew update brew upgrade brew tap ethereum/ethereum brew install solidity Others You can follow the detailed instructions at Installing the Solidity Compiler . Note that latest solidity compiler may be incompatible with Conflux and may cause the integration test to fail. If you encounter such problem, please install solidity compiler version 0.5.2. To run tests, you can build the source code first and follow the instructions at Running Test .","title":"Install Test Dependencies"},{"location":"json-rpc/","text":"Conflux JSON-RPC API \u00b6 The Conflux JSON-RPC API is a collection of interfaces which allow you to interact with a local or remote Conflux node, using an HTTP connection in JSON-RPC protocol. The following is an API reference documentation with examples. JSON-RPC \u00b6 JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format. JavaScript API \u00b6 There will be a JavaScript library comming soon for you to interact with a Conflux node from inside a JavaScript application, which gives a convenient interface for the RPC methods. JSON-RPC endpoint && support \u00b6 Currently, Conflux has a Rust implementation that supports JSON-RPC 2.0 and HTTP. HEX value encoding \u00b6 At present there are two key datatypes that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting: When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x0\"). Examples: 0x41 (65 in decimal) 0x400 (1024 in decimal) WRONG: 0x (should always have at least one digit - zero is \"0x0\") WRONG: 0x0400 (no leading zeroes allowed) WRONG: ff (must be prefixed 0x) When encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \"0x\", two hex digits per byte. Examples: 0x41 (size 1, \"A\") 0x004200 (size 3, \"\\0B\\0\") 0x (size 0, \"\") WRONG: 0xf0f0f (must be even number of digits) WRONG: 004200 (must be prefixed 0x) The default epoch parameter \u00b6 The following methods have a default epoch parameter: cfx_getTransactionCount cfx_getBalance cfx_getBlockByEpochNumber cfx_epochNumber cfx_getBlocksByEpoch When requests are made that act on the state of conflux, the default epoch parameter determines the height of the epoch. The following options are possible for the default epoch parameter: HEX String - an integer epoch number String \"earliest\" for the earliest epoch where the genesis block in String \"latest_mined\" - for the latest epoch where the latest mined block in String \"latest_state\" - for the latest epoch where the latest block with an executed state in Curl Examples Explained \u00b6 The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also include the URL/IP & port combination which must be the last argument given to curl e.x. http://localhost:12345 Example for cfx_getbestblockhash curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBestBlockHash\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://localhost:12345 JSON-RPC methods \u00b6 cfx_getTransactionByHash \u00b6 Returns the information about a transaction requested by transaction hash. Parameters \u00b6 DATA, 32 Bytes - hash of a transaction params: [ '0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b', ] Returns \u00b6 Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in and got executed. null when its pending. data : DATA - the data send along with the transaction. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Drip. hash : DATA , 32 Bytes - hash of the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. v : QUANTITY - ECDSA recovery id value : QUANTITY - value transferred in Drip. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getTransactionByHash\",\"params\":[\"0xc92e7a598f6fe4c091dd604d84b23c5af6f0338d9612c76a1fb06dfdaed548b2\"],\"id\":1}' // Result { \"id\" : 1, \"jsonrpc\" : \"2.0\", \"result\" : { \"s\" : \"0x7dde8fb74652930d390a6dcec61ffef014bed2a30ebab0e9ceedd487959f6964\", \"v\" : \"0x0\", \"gas\" : \"0x5208\", \"data\" : \"0x\", \"blockHash\" : \"0x63d88f4de98e3c324baa4eb146c2cf714d5ecd6554549bbf6a0fc3a17b166a47\", \"gasPrice\" : \"0x1\", \"to\" : \"0x2a2c1a99e1ae7416118e335ac1032902377ce850\", \"r\" : \"0x72f494f114324bda0b0abade293ef529fe22301ea7bf66fdcbf1b399c0189778\", \"transactionIndex\" : \"0x4a\", \"value\" : \"0x1\", \"nonce\" : \"0x2\", \"from\" : \"0x28ca21e860bd91851bfca4406e429f74f09e4be3\", \"hash\" : \"0xc92e7a598f6fe4c091dd604d84b23c5af6f0338d9612c76a1fb06dfdaed548b2\" } } cfx_getBlockByHash \u00b6 Returns information about a block by hash. Parameters \u00b6 DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ] Returns \u00b6 Object - A block object, or null when no block was found: hash : DATA , 32 Bytes - hash of the block. null when its pending block. epochNumber : QUANTITY - the current block epoch number in the client's view. null when it's not in best block's past set. height : QUANTITY - the block heights. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. nonce : DATA , 8 Bytes - hash of the generated proof-of-work. null when its pending block. transactionsRoot : DATA , 32 Bytes - the hash of the transactions of the block. deferredStateRoot : DATA , 32 Bytes - the root of the final state trie of the block after deferred execution. deferredReceiptsRoot : DATA , 32 Bytes - the hash of the receipts of the block after deferred execution. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. difficulty : QUANTITY - integer of the difficulty for this block. size : QUANTITY - integer the size of this block in bytes. gasLimit : QUANTITY - the maximum gas allowed in this block. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. refereeHashes : Array - Array of referee hashes. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlockByHash\",\"params\":[\"0x5c641dd7fa7f0dbf486391bd1310f09b6f062ec221f410e5a1bb2c24739b3d94\", false],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"result\": { \"deferredReceiptsRoot\": \"0x602e2c03b2857ae2c9e84c822d1a5b32d0161271096c927b27ca56379cee79eb\", \"deferredStateRoot\": \"0x3a42c10a8dd6bebe914095967b7f5caef472a66ede3e1973118a54934f63d143\", \"difficulty\": \"0x4\", \"epochNumber\": \"0x20\", \"gasLimit\": \"0xb2d05e00\", \"hash\": \"0x5c641dd7fa7f0dbf486391bd1310f09b6f062ec221f410e5a1bb2c24739b3d94\", \"height\": \"0x1d\", \"miner\": \"0x0000000000000000000000000000000000000000\", \"nonce\": \"0x53447d364b6019b\", \"parentHash\": \"0xe64ffb49c8bde64d0fd2916ce9351e485741aac89719e89989fe8f8112801a40\", \"refereeHashes\": [ \"0x431eccfc94c4738b7f560f226a82ca58e9b81bb5aadd3d66acdcab1acc470300\", \"0xe9067a60c14bfc93bbaf78e874be2a25bd948bda3c56fff6ee321d045727ef1f\", \"0x630b40c28974a360840a10268a56be1ca203a45a726e6ca4e04abd4d7523b7cb\", \"0x6cff3a277fc0bf17c359568da27a62f8273753cbcbed6a80b994fc50c8b140b4\" ], \"size\": \"0x0\", \"timestamp\": \"0x0\", \"transactions\": [ \"0x0a39c1048ffccb59ec0df0cb5d17733cb5be219c066bf0035fb6a1e281bfdc77\", \"0xf114b5c01a3b84c8e2389c0d8dc9c1b3fdefe4ac238d224577855373897d4a3a\" ], \"transactionsRoot\": \"0xaed37b3d6c8b0336d42b4b798e1d1f73103de7473f0601736cb95adc3c4b4ea7\" }, \"id\": 1 } cfx_getBlockByEpochNumber \u00b6 Returns information about a block by epoch number. Parameters \u00b6 QUANTITY|TAG - the epoch number, or the string \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. params: [ 'latest_mined', true ] Returns \u00b6 See cfx_getBlockByHash . Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlockByHash\",\"params\":[\"latest_mined\", false],\"id\":1}' Result see cfx_getBlockByHash . cfx_getBestBlockHash \u00b6 Returns the hash of best block. Parameters \u00b6 none Returns \u00b6 DATA , 32 Bytes - hash of the best block. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBestBlockHash\",\"params\":[],\"id\":1}' // Result { \"result\" : \"0x7d54c03f4fe971d5c45d95dddc770a0ec8d5bd27d57c049ce8adc469269e35a4\", \"id\" : 1, \"jsonrpc\" : \"2.0\" } cfx_epochNumber \u00b6 Returns the current epoch number the client is on. Parameters \u00b6 TAG - (optional, default: \"latest_mined\") String \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter . Returns \u00b6 QUANTITY - integer of the current epoch number the client is on. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_epochNumber\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"id\" : 1, \"result\" : \"0x49\" } cfx_gasPrice \u00b6 Returns the current price per gas in Drip. Parameters \u00b6 none Returns \u00b6 QUANTITY - integer of the current gas price in Drip. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_gasPrice\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"id\" : 1, \"result\" : \"0x09184e72a000\" } cfx_getBlocksByEpoch \u00b6 Returns hashes of blocks located in some epoch. Parameters \u00b6 QUANTITY|TAG - the epoch number, or the string \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter . Returns \u00b6 Array - Array of block hashes, sorted by execution(topological) order. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlocksByEpoch\",\"params\":[\"0x11\"],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"result\": [ \"0x618e813ed93f1020bab13a1ab77e1550da6c89d9c69de837033512e91ac46bd0\", \"0x0f6ac81dcbc612e72e0019681bcec32254a34bd29a6bbab91e5e8dc37ecb64d5\", \"0xad3238c00456adfbf847d251b004c1e306fe637227bb1b9917d77bd5b207af68\", \"0x0f92c2e796be7b016d8b74c6c270fb1851e47fabaca3e464d407544286d6cd34\", \"0x5bcc2b8d2493797fcadf7b80228ef5b713eb9ff65f7cdd86562db629d0caf721\", \"0x7fcdc6fff506b19a2bd72cd3430310915f19a59b046759bb790ba4eeb95e9956\", \"0xf4f33ed08e1c625f4dde608eeb92991d77fff26122bab28a6b3a2037511dcc83\", \"0xa3762adc7f066d5cb62c683c2655be3bc3405ff1397f77d2e1dbeff2d8522e00\", \"0xba7588476a5ec7e0ade00f060180cadb7430fd1be48940414baac48c0d39556d\", \"0xe4dc4541d07118b598b2ec67bbdaa219eb1d649471fe7b5667a0001d83b1e9b6\", \"0x93a15564544c57d6cb68dbdf60133b318a94439e1f0a9ccb331b0f5a0aaf8049\" ], \"id\": 1 } cfx_getBalance \u00b6 Returns the balance of the account of given address. Parameters \u00b6 DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer epoch number, or the string \"latest_mined\", \"latest_state\", \"earliest\", see the default epoch parameter params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest_state' ] Returns \u00b6 QUANTITY - integer of the current balance in Drip. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest_state\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 } cfx_getTransactionCount \u00b6 Returns the number of transactions sent from an address. Parameters \u00b6 DATA , 20 Bytes - address. QUANTITY|TAG - integer epoch number, or the string \"latest_mined\", \"latest_state\", \"earliest\", see the default epoch parameter params: [ '0xfbe45681ac6c53d5a40475f7526bac1fe7590fb8', 'latest_state' // state at the latest executed epoch ] Returns \u00b6 QUANTITY - integer of the number of transactions send from this address. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getTransactionCount\",\"params\":[\"0xfbe45681ac6c53d5a40475f7526bac1fe7590fb8\", 'latest_state'],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"result\" : \"0x1\", \"id\" : 1 } cfx_sendRawTransaction \u00b6 Creates new message call transaction or a contract creation for signed transactions. Parameters \u00b6 DATA , The signed transaction data. params: [ '0xf889808609184e72a00082271094000000000000000000000000000000000000000080a47f746573743200000000000000000000000000000000000000000000000000000060005701a08a8bbf888cfa37bbf0bb965423625641fc956967b81d12e23709cead01446075a01ce999b56a8a88504be365442ea61239198e23d1fce7d00fcfc5cd3b44b7215f' ] Returns \u00b6 DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Example \u00b6 // Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x83a610d4a8ebd20dde487f6d02c1d26f6ae8cb2bb4f0b74466a7597ce682077f\" }","title":"JSON-RPC API"},{"location":"json-rpc/#conflux-json-rpc-api","text":"The Conflux JSON-RPC API is a collection of interfaces which allow you to interact with a local or remote Conflux node, using an HTTP connection in JSON-RPC protocol. The following is an API reference documentation with examples.","title":"Conflux JSON-RPC API"},{"location":"json-rpc/#json-rpc","text":"JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format.","title":"JSON-RPC"},{"location":"json-rpc/#javascript-api","text":"There will be a JavaScript library comming soon for you to interact with a Conflux node from inside a JavaScript application, which gives a convenient interface for the RPC methods.","title":"JavaScript API"},{"location":"json-rpc/#json-rpc-endpoint-support","text":"Currently, Conflux has a Rust implementation that supports JSON-RPC 2.0 and HTTP.","title":"JSON-RPC endpoint &amp;&amp; support"},{"location":"json-rpc/#hex-value-encoding","text":"At present there are two key datatypes that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting: When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x0\"). Examples: 0x41 (65 in decimal) 0x400 (1024 in decimal) WRONG: 0x (should always have at least one digit - zero is \"0x0\") WRONG: 0x0400 (no leading zeroes allowed) WRONG: ff (must be prefixed 0x) When encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \"0x\", two hex digits per byte. Examples: 0x41 (size 1, \"A\") 0x004200 (size 3, \"\\0B\\0\") 0x (size 0, \"\") WRONG: 0xf0f0f (must be even number of digits) WRONG: 004200 (must be prefixed 0x)","title":"HEX value encoding"},{"location":"json-rpc/#the-default-epoch-parameter","text":"The following methods have a default epoch parameter: cfx_getTransactionCount cfx_getBalance cfx_getBlockByEpochNumber cfx_epochNumber cfx_getBlocksByEpoch When requests are made that act on the state of conflux, the default epoch parameter determines the height of the epoch. The following options are possible for the default epoch parameter: HEX String - an integer epoch number String \"earliest\" for the earliest epoch where the genesis block in String \"latest_mined\" - for the latest epoch where the latest mined block in String \"latest_state\" - for the latest epoch where the latest block with an executed state in","title":"The default epoch parameter"},{"location":"json-rpc/#curl-examples-explained","text":"The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also include the URL/IP & port combination which must be the last argument given to curl e.x. http://localhost:12345 Example for cfx_getbestblockhash curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBestBlockHash\",\"params\":[],\"id\":1}' -H \"Content-Type: application/json\" http://localhost:12345","title":"Curl Examples Explained"},{"location":"json-rpc/#json-rpc-methods","text":"","title":"JSON-RPC methods"},{"location":"json-rpc/#cfx_gettransactionbyhash","text":"Returns the information about a transaction requested by transaction hash.","title":"cfx_getTransactionByHash"},{"location":"json-rpc/#parameters","text":"DATA, 32 Bytes - hash of a transaction params: [ '0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b', ]","title":"Parameters"},{"location":"json-rpc/#returns","text":"Object - A transaction object, or null when no transaction was found: blockHash : DATA , 32 Bytes - hash of the block where this transaction was in and got executed. null when its pending. data : DATA - the data send along with the transaction. from : DATA , 20 Bytes - address of the sender. gas : QUANTITY - gas provided by the sender. gasPrice : QUANTITY - gas price provided by the sender in Drip. hash : DATA , 32 Bytes - hash of the transaction. nonce : QUANTITY - the number of transactions made by the sender prior to this one. r : DATA , 32 Bytes - ECDSA signature r s : DATA , 32 Bytes - ECDSA signature s to : DATA , 20 Bytes - address of the receiver. null when its a contract creation transaction. transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when its pending. v : QUANTITY - ECDSA recovery id value : QUANTITY - value transferred in Drip.","title":"Returns"},{"location":"json-rpc/#example","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getTransactionByHash\",\"params\":[\"0xc92e7a598f6fe4c091dd604d84b23c5af6f0338d9612c76a1fb06dfdaed548b2\"],\"id\":1}' // Result { \"id\" : 1, \"jsonrpc\" : \"2.0\", \"result\" : { \"s\" : \"0x7dde8fb74652930d390a6dcec61ffef014bed2a30ebab0e9ceedd487959f6964\", \"v\" : \"0x0\", \"gas\" : \"0x5208\", \"data\" : \"0x\", \"blockHash\" : \"0x63d88f4de98e3c324baa4eb146c2cf714d5ecd6554549bbf6a0fc3a17b166a47\", \"gasPrice\" : \"0x1\", \"to\" : \"0x2a2c1a99e1ae7416118e335ac1032902377ce850\", \"r\" : \"0x72f494f114324bda0b0abade293ef529fe22301ea7bf66fdcbf1b399c0189778\", \"transactionIndex\" : \"0x4a\", \"value\" : \"0x1\", \"nonce\" : \"0x2\", \"from\" : \"0x28ca21e860bd91851bfca4406e429f74f09e4be3\", \"hash\" : \"0xc92e7a598f6fe4c091dd604d84b23c5af6f0338d9612c76a1fb06dfdaed548b2\" } }","title":"Example"},{"location":"json-rpc/#cfx_getblockbyhash","text":"Returns information about a block by hash.","title":"cfx_getBlockByHash"},{"location":"json-rpc/#parameters_1","text":"DATA , 32 Bytes - Hash of a block. Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. params: [ '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', true ]","title":"Parameters"},{"location":"json-rpc/#returns_1","text":"Object - A block object, or null when no block was found: hash : DATA , 32 Bytes - hash of the block. null when its pending block. epochNumber : QUANTITY - the current block epoch number in the client's view. null when it's not in best block's past set. height : QUANTITY - the block heights. null when its pending block. parentHash : DATA , 32 Bytes - hash of the parent block. nonce : DATA , 8 Bytes - hash of the generated proof-of-work. null when its pending block. transactionsRoot : DATA , 32 Bytes - the hash of the transactions of the block. deferredStateRoot : DATA , 32 Bytes - the root of the final state trie of the block after deferred execution. deferredReceiptsRoot : DATA , 32 Bytes - the hash of the receipts of the block after deferred execution. miner : DATA , 20 Bytes - the address of the beneficiary to whom the mining rewards were given. difficulty : QUANTITY - integer of the difficulty for this block. size : QUANTITY - integer the size of this block in bytes. gasLimit : QUANTITY - the maximum gas allowed in this block. timestamp : QUANTITY - the unix timestamp for when the block was collated. transactions : Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. refereeHashes : Array - Array of referee hashes.","title":"Returns"},{"location":"json-rpc/#example_1","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlockByHash\",\"params\":[\"0x5c641dd7fa7f0dbf486391bd1310f09b6f062ec221f410e5a1bb2c24739b3d94\", false],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"result\": { \"deferredReceiptsRoot\": \"0x602e2c03b2857ae2c9e84c822d1a5b32d0161271096c927b27ca56379cee79eb\", \"deferredStateRoot\": \"0x3a42c10a8dd6bebe914095967b7f5caef472a66ede3e1973118a54934f63d143\", \"difficulty\": \"0x4\", \"epochNumber\": \"0x20\", \"gasLimit\": \"0xb2d05e00\", \"hash\": \"0x5c641dd7fa7f0dbf486391bd1310f09b6f062ec221f410e5a1bb2c24739b3d94\", \"height\": \"0x1d\", \"miner\": \"0x0000000000000000000000000000000000000000\", \"nonce\": \"0x53447d364b6019b\", \"parentHash\": \"0xe64ffb49c8bde64d0fd2916ce9351e485741aac89719e89989fe8f8112801a40\", \"refereeHashes\": [ \"0x431eccfc94c4738b7f560f226a82ca58e9b81bb5aadd3d66acdcab1acc470300\", \"0xe9067a60c14bfc93bbaf78e874be2a25bd948bda3c56fff6ee321d045727ef1f\", \"0x630b40c28974a360840a10268a56be1ca203a45a726e6ca4e04abd4d7523b7cb\", \"0x6cff3a277fc0bf17c359568da27a62f8273753cbcbed6a80b994fc50c8b140b4\" ], \"size\": \"0x0\", \"timestamp\": \"0x0\", \"transactions\": [ \"0x0a39c1048ffccb59ec0df0cb5d17733cb5be219c066bf0035fb6a1e281bfdc77\", \"0xf114b5c01a3b84c8e2389c0d8dc9c1b3fdefe4ac238d224577855373897d4a3a\" ], \"transactionsRoot\": \"0xaed37b3d6c8b0336d42b4b798e1d1f73103de7473f0601736cb95adc3c4b4ea7\" }, \"id\": 1 }","title":"Example"},{"location":"json-rpc/#cfx_getblockbyepochnumber","text":"Returns information about a block by epoch number.","title":"cfx_getBlockByEpochNumber"},{"location":"json-rpc/#parameters_2","text":"QUANTITY|TAG - the epoch number, or the string \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter . Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions. params: [ 'latest_mined', true ]","title":"Parameters"},{"location":"json-rpc/#returns_2","text":"See cfx_getBlockByHash .","title":"Returns"},{"location":"json-rpc/#example_2","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlockByHash\",\"params\":[\"latest_mined\", false],\"id\":1}' Result see cfx_getBlockByHash .","title":"Example"},{"location":"json-rpc/#cfx_getbestblockhash","text":"Returns the hash of best block.","title":"cfx_getBestBlockHash"},{"location":"json-rpc/#parameters_3","text":"none","title":"Parameters"},{"location":"json-rpc/#returns_3","text":"DATA , 32 Bytes - hash of the best block.","title":"Returns"},{"location":"json-rpc/#example_3","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBestBlockHash\",\"params\":[],\"id\":1}' // Result { \"result\" : \"0x7d54c03f4fe971d5c45d95dddc770a0ec8d5bd27d57c049ce8adc469269e35a4\", \"id\" : 1, \"jsonrpc\" : \"2.0\" }","title":"Example"},{"location":"json-rpc/#cfx_epochnumber","text":"Returns the current epoch number the client is on.","title":"cfx_epochNumber"},{"location":"json-rpc/#parameters_4","text":"TAG - (optional, default: \"latest_mined\") String \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter .","title":"Parameters"},{"location":"json-rpc/#returns_4","text":"QUANTITY - integer of the current epoch number the client is on.","title":"Returns"},{"location":"json-rpc/#example_4","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_epochNumber\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"id\" : 1, \"result\" : \"0x49\" }","title":"Example"},{"location":"json-rpc/#cfx_gasprice","text":"Returns the current price per gas in Drip.","title":"cfx_gasPrice"},{"location":"json-rpc/#parameters_5","text":"none","title":"Parameters"},{"location":"json-rpc/#returns_5","text":"QUANTITY - integer of the current gas price in Drip.","title":"Returns"},{"location":"json-rpc/#example_5","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_gasPrice\",\"params\":[],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"id\" : 1, \"result\" : \"0x09184e72a000\" }","title":"Example"},{"location":"json-rpc/#cfx_getblocksbyepoch","text":"Returns hashes of blocks located in some epoch.","title":"cfx_getBlocksByEpoch"},{"location":"json-rpc/#parameters_6","text":"QUANTITY|TAG - the epoch number, or the string \"latest_mined\", \"latest_state\" or \"earliest\", see the default epoch parameter .","title":"Parameters"},{"location":"json-rpc/#returns_6","text":"Array - Array of block hashes, sorted by execution(topological) order.","title":"Returns"},{"location":"json-rpc/#example_6","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBlocksByEpoch\",\"params\":[\"0x11\"],\"id\":1}' // Result { \"jsonrpc\": \"2.0\", \"result\": [ \"0x618e813ed93f1020bab13a1ab77e1550da6c89d9c69de837033512e91ac46bd0\", \"0x0f6ac81dcbc612e72e0019681bcec32254a34bd29a6bbab91e5e8dc37ecb64d5\", \"0xad3238c00456adfbf847d251b004c1e306fe637227bb1b9917d77bd5b207af68\", \"0x0f92c2e796be7b016d8b74c6c270fb1851e47fabaca3e464d407544286d6cd34\", \"0x5bcc2b8d2493797fcadf7b80228ef5b713eb9ff65f7cdd86562db629d0caf721\", \"0x7fcdc6fff506b19a2bd72cd3430310915f19a59b046759bb790ba4eeb95e9956\", \"0xf4f33ed08e1c625f4dde608eeb92991d77fff26122bab28a6b3a2037511dcc83\", \"0xa3762adc7f066d5cb62c683c2655be3bc3405ff1397f77d2e1dbeff2d8522e00\", \"0xba7588476a5ec7e0ade00f060180cadb7430fd1be48940414baac48c0d39556d\", \"0xe4dc4541d07118b598b2ec67bbdaa219eb1d649471fe7b5667a0001d83b1e9b6\", \"0x93a15564544c57d6cb68dbdf60133b318a94439e1f0a9ccb331b0f5a0aaf8049\" ], \"id\": 1 }","title":"Example"},{"location":"json-rpc/#cfx_getbalance","text":"Returns the balance of the account of given address.","title":"cfx_getBalance"},{"location":"json-rpc/#parameters_7","text":"DATA , 20 Bytes - address to check for balance. QUANTITY|TAG - integer epoch number, or the string \"latest_mined\", \"latest_state\", \"earliest\", see the default epoch parameter params: [ '0xc94770007dda54cF92009BFF0dE90c06F603a09f', 'latest_state' ]","title":"Parameters"},{"location":"json-rpc/#returns_7","text":"QUANTITY - integer of the current balance in Drip.","title":"Returns"},{"location":"json-rpc/#example_7","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getBalance\",\"params\":[\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest_state\"],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x0234c8a3397aab58\" // 158972490234375000 }","title":"Example"},{"location":"json-rpc/#cfx_gettransactioncount","text":"Returns the number of transactions sent from an address.","title":"cfx_getTransactionCount"},{"location":"json-rpc/#parameters_8","text":"DATA , 20 Bytes - address. QUANTITY|TAG - integer epoch number, or the string \"latest_mined\", \"latest_state\", \"earliest\", see the default epoch parameter params: [ '0xfbe45681ac6c53d5a40475f7526bac1fe7590fb8', 'latest_state' // state at the latest executed epoch ]","title":"Parameters"},{"location":"json-rpc/#returns_8","text":"QUANTITY - integer of the number of transactions send from this address.","title":"Returns"},{"location":"json-rpc/#example_8","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_getTransactionCount\",\"params\":[\"0xfbe45681ac6c53d5a40475f7526bac1fe7590fb8\", 'latest_state'],\"id\":1}' // Result { \"jsonrpc\" : \"2.0\", \"result\" : \"0x1\", \"id\" : 1 }","title":"Example"},{"location":"json-rpc/#cfx_sendrawtransaction","text":"Creates new message call transaction or a contract creation for signed transactions.","title":"cfx_sendRawTransaction"},{"location":"json-rpc/#parameters_9","text":"DATA , The signed transaction data. params: [ '0xf889808609184e72a00082271094000000000000000000000000000000000000000080a47f746573743200000000000000000000000000000000000000000000000000000060005701a08a8bbf888cfa37bbf0bb965423625641fc956967b81d12e23709cead01446075a01ce999b56a8a88504be365442ea61239198e23d1fce7d00fcfc5cd3b44b7215f' ]","title":"Parameters"},{"location":"json-rpc/#returns_9","text":"DATA , 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.","title":"Returns"},{"location":"json-rpc/#example_9","text":"// Request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"cfx_sendRawTransaction\",\"params\":[{see above}],\"id\":1}' // Result { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"0x83a610d4a8ebd20dde487f6d02c1d26f6ae8cb2bb4f0b74466a7597ce682077f\" }","title":"Example"},{"location":"overview/","text":"Overview \u00b6","title":"Overview"},{"location":"overview/#overview","text":"","title":"Overview"}]}